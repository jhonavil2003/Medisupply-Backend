name: MediSupply Backend - Complete CI/CD Pipeline

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

concurrency:
  group: ci-medisupply-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup-verification:
    name: "Setup & Project Structure"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Verify project structure
        run: |
          echo "Verifying MediSupply project structure..."
          
          test -d catalog-service && echo "✅ catalog-service/ exists" || (echo "❌: catalog-service/ missing" && exit 1)
          test -d logistics-service && echo "✅ logistics-service/ exists" || (echo "❌: logistics-service/ missing" && exit 1)
          test -d sales-service && echo "✅ sales-service/ exists" || (echo "❌: sales-service/ missing" && exit 1)
          
          test -f docker-compose.yml && echo "✅ docker-compose.yml exists" || (echo "❌: docker-compose.yml missing" && exit 1)
          
          test -f catalog-service/Pipfile && echo "✅ catalog-service/Pipfile exists" || exit 1
          test -f logistics-service/Pipfile && echo "✅ logistics-service/Pipfile exists" || exit 1
          test -f sales-service/Pipfile && echo "✅ sales-service/Pipfile exists" || exit 1
          
          test -f catalog-service/Pipfile.lock && echo "✅ catalog-service/Pipfile.lock exists" || exit 1
          test -f logistics-service/Pipfile.lock && echo "✅ logistics-service/Pipfile.lock exists" || exit 1
          test -f sales-service/Pipfile.lock && echo "✅ sales-service/Pipfile.lock exists" || exit 1
          
          echo "✅ Project structure verified successfully"

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install "pipenv>=2023.0.0"
          echo "✅ Pipenv installed"

  unit-test-catalog:
    name: "Unit Tests - Catalog Service"
    runs-on: ubuntu-latest
    needs: setup-verification

    defaults:
      run:
        working-directory: ./catalog-service

    env:
      PIPENV_VENV_IN_PROJECT: "1"
      PIPENV_NOSPIN: "1"
      PIPENV_HIDE_EMOJIS: "1"
      PIPENV_PYTHON: "3.9"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-catalog-${{ runner.os }}-${{ hashFiles('catalog-service/Pipfile.lock') }}
          restore-keys: |
            pip-catalog-${{ runner.os }}-

      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: catalog-service/.venv
          key: venv-catalog-${{ runner.os }}-${{ hashFiles('catalog-service/Pipfile.lock') }}

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install "pipenv>=2023.0.0"

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev --skip-lock

      - name: Show environment
        run: |
          pipenv run python --version
          pipenv --venv
          pipenv graph

      - name: Run catalog-service tests
        run: |
          echo "Running catalog-service unit tests..."
          pipenv run pytest tests/ -v --tb=short \
            --junitxml=pytest-catalog.xml \
            --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-catalog-results
          path: catalog-service/pytest-catalog.xml

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-catalog
          path: catalog-service/coverage.xml

  unit-test-logistics:
    name: "Unit Tests - Logistics Service"
    runs-on: ubuntu-latest
    needs: setup-verification

    defaults:
      run:
        working-directory: ./logistics-service

    env:
      PIPENV_VENV_IN_PROJECT: "1"
      PIPENV_NOSPIN: "1"
      PIPENV_HIDE_EMOJIS: "1"
      PIPENV_PYTHON: "3.9"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-logistics-${{ runner.os }}-${{ hashFiles('logistics-service/Pipfile.lock') }}
          restore-keys: |
            pip-logistics-${{ runner.os }}-

      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: logistics-service/.venv
          key: venv-logistics-${{ runner.os }}-${{ hashFiles('logistics-service/Pipfile.lock') }}

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install "pipenv>=2023.0.0"

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev --skip-lock

      - name: Show environment
        run: |
          pipenv run python --version
          pipenv --venv
          pipenv graph

      - name: Run logistics-service tests
        run: |
          echo "Running logistics-service unit tests..."
          pipenv run pytest tests/ -v --tb=short \
            --junitxml=pytest-logistics.xml \
            --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logistics-results
          path: logistics-service/pytest-logistics.xml

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-logistics
          path: logistics-service/coverage.xml

  unit-test-sales:
    name: "Unit Tests - Sales Service"
    runs-on: ubuntu-latest
    needs: setup-verification

    defaults:
      run:
        working-directory: ./sales-service

    env:
      PIPENV_VENV_IN_PROJECT: "1"
      PIPENV_NOSPIN: "1"
      PIPENV_HIDE_EMOJIS: "1"
      PIPENV_PYTHON: "3.9"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-sales-${{ runner.os }}-${{ hashFiles('sales-service/Pipfile.lock') }}
          restore-keys: |
            pip-sales-${{ runner.os }}-

      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: sales-service/.venv
          key: venv-sales-${{ runner.os }}-${{ hashFiles('sales-service/Pipfile.lock') }}

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install "pipenv>=2023.0.0"

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          pipenv install --dev --skip-lock

      - name: Show environment
        run: |
          pipenv run python --version
          pipenv --venv
          pipenv graph

      - name: Run sales-service tests
        run: |
          echo "Running sales-service unit tests..."
          pipenv run pytest tests/ -v --tb=short \
            --junitxml=pytest-sales.xml \
            --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-sales-results
          path: sales-service/pytest-sales.xml

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-sales
          path: sales-service/coverage.xml

  coverage-report:
    name: "Coverage Analysis"
    runs-on: ubuntu-latest
    needs: [unit-test-catalog, unit-test-logistics, unit-test-sales]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports

      - name: Analyze coverage
        run: |
          echo "Coverage Analysis Summary"
          echo "=============================="
          
          if [ -f "coverage-reports/coverage-catalog/coverage.xml" ]; then
            echo "✅ Catalog Service coverage report found"
          else
            echo "⚠️: Catalog Service coverage report missing"
          fi
          
          if [ -f "coverage-reports/coverage-logistics/coverage.xml" ]; then
            echo "✅ Logistics Service coverage report found"
          else
            echo "⚠️: Logistics Service coverage report missing"
          fi
          
          if [ -f "coverage-reports/coverage-sales/coverage.xml" ]; then
            echo "✅ Sales Service coverage report found"
          else
            echo "⚠️: Sales Service coverage report missing"
          fi
          
          echo ""
          echo "Check individual job outputs for detailed coverage metrics"

  integration-test-docker:
    name: "Integration Tests - Docker Compose"
    runs-on: ubuntu-latest
    needs: [unit-test-catalog, unit-test-logistics, unit-test-sales]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: |
          echo "Starting MediSupply services with Docker Compose..."
          docker compose up -d
          
          echo "Waiting for services to be healthy..."
          sleep 30

      - name: Check services health
        run: |
          echo "Checking health of all services..."
          
          CATALOG_HEALTH=$(curl -s http://localhost:3001/health || echo "FAILED")
          echo "Catalog Service: $CATALOG_HEALTH"
          
          LOGISTICS_HEALTH=$(curl -s http://localhost:3002/health || echo "FAILED")
          echo "Logistics Service: $LOGISTICS_HEALTH"
          
          SALES_HEALTH=$(curl -s http://localhost:3003/health || echo "FAILED")
          echo "Sales Service: $SALES_HEALTH"
          
          if [[ "$CATALOG_HEALTH" == *"healthy"* ]] && \
             [[ "$LOGISTICS_HEALTH" == *"healthy"* ]] && \
             [[ "$SALES_HEALTH" == *"healthy"* ]]; then
            echo "✅ All services are healthy"
          else
            echo "❌: Some services are not healthy"
            docker compose logs
            exit 1
          fi

      - name: Test service integration
        run: |
          echo "Testing integration between services..."
          
          echo "Test 1: GET /products from catalog-service"
          PRODUCTS=$(curl -s http://localhost:3001/products)
          echo "Products response: $PRODUCTS"
          
          echo "Test 2: GET /inventory/stock-levels from logistics-service"
          STOCK=$(curl -s "http://localhost:3002/inventory/stock-levels?product_sku=TEST-001" || echo "FAILED")
          echo "Stock response: $STOCK"
          
          echo "Test 3: GET /customers from sales-service"
          CUSTOMERS=$(curl -s http://localhost:3003/customers)
          echo "Customers response: $CUSTOMERS"
          
          echo "✅ Basic integration tests completed"

      - name: Stop services
        if: always()
        run: |
          echo "Stopping Docker Compose services..."
          docker compose down -v
          echo "✅ Services stopped"

  e2e-test-delete-order:
    name: "E2E Tests - Delete Order Feature"
    runs-on: ubuntu-latest
    needs: [unit-test-catalog, unit-test-logistics, unit-test-sales]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with Docker Compose
        run: |
          echo "Starting MediSupply services for E2E tests..."
          docker compose up -d
          
          echo "Waiting for services to be healthy..."
          sleep 30

      - name: Verify services are ready
        run: |
          echo "Verifying all services are healthy..."
          
          CATALOG_HEALTH=$(curl -s http://localhost:3001/health || echo "FAILED")
          LOGISTICS_HEALTH=$(curl -s http://localhost:3002/health || echo "FAILED")
          SALES_HEALTH=$(curl -s http://localhost:3003/health || echo "FAILED")
          
          if [[ "$CATALOG_HEALTH" != *"healthy"* ]] || \
             [[ "$LOGISTICS_HEALTH" != *"healthy"* ]] || \
             [[ "$SALES_HEALTH" != *"healthy"* ]]; then
            echo "❌: Services are not healthy"
            docker compose logs
            exit 1
          fi
          
          echo "✅ All services are ready for E2E testing"

      - name: E2E Test - Create and Delete Order Flow
        run: |
          echo "=========================================="
          echo "E2E Test: Complete Order Lifecycle"
          echo "=========================================="
          
          # Step 1: Get a customer
          echo ""
          echo "Step 1: Fetching customers..."
          CUSTOMERS_RESPONSE=$(curl -s http://localhost:3003/customers)
          echo "Customers response: $CUSTOMERS_RESPONSE"
          
          CUSTOMER_ID=$(echo $CUSTOMERS_RESPONSE | grep -o '"id":[0-9]*' | head -1 | grep -o '[0-9]*')
          
          if [ -z "$CUSTOMER_ID" ]; then
            echo "❌: No customers found, cannot proceed with E2E test"
            exit 1
          fi
          
          echo "✅ Using customer ID: $CUSTOMER_ID"
          
          # Step 2: Get a product
          echo ""
          echo "Step 2: Fetching products from catalog..."
          PRODUCTS_RESPONSE=$(curl -s http://localhost:3001/products)
          echo "Products response: $PRODUCTS_RESPONSE"
          
          PRODUCT_SKU=$(echo $PRODUCTS_RESPONSE | grep -o '"sku":"[^"]*"' | head -1 | sed 's/"sku":"\([^"]*\)"/\1/')
          
          if [ -z "$PRODUCT_SKU" ]; then
            echo "❌: No products found, cannot proceed with E2E test"
            exit 1
          fi
          
          echo "✅ Using product SKU: $PRODUCT_SKU"
          
          # Step 3: Check stock availability
          echo ""
          echo "Step 3: Verifying stock availability..."
          STOCK_RESPONSE=$(curl -s "http://localhost:3002/inventory/stock-levels?product_sku=$PRODUCT_SKU")
          echo "Stock response: $STOCK_RESPONSE"
          echo "✅ Stock verified"
          
          # Step 4: Create an order
          echo ""
          echo "Step 4: Creating a new order..."
          
          CREATE_ORDER_PAYLOAD=$(cat <<EOF
          {
            "customer_id": $CUSTOMER_ID,
            "seller_id": "E2E-SELLER-001",
            "seller_name": "E2E Test Seller",
            "items": [
              {
                "product_sku": "$PRODUCT_SKU",
                "quantity": 5,
                "discount_percentage": 0.0,
                "tax_percentage": 19.0
              }
            ],
            "payment_terms": "contado",
            "payment_method": "efectivo",
            "delivery_address": "Calle 123 #45-67",
            "delivery_city": "Bogotá",
            "delivery_department": "Cundinamarca",
            "notes": "E2E Test Order - To be deleted"
          }
          EOF
          )
          
          CREATE_RESPONSE=$(curl -s -X POST http://localhost:3003/orders \
            -H "Content-Type: application/json" \
            -d "$CREATE_ORDER_PAYLOAD")
          
          echo "Create order response: $CREATE_RESPONSE"
          
          ORDER_ID=$(echo $CREATE_RESPONSE | grep -o '"id":[0-9]*' | head -1 | grep -o '[0-9]*')
          ORDER_NUMBER=$(echo $CREATE_RESPONSE | grep -o '"order_number":"[^"]*"' | sed 's/"order_number":"\([^"]*\)"/\1/')
          
          if [ -z "$ORDER_ID" ]; then
            echo "❌: Failed to create order"
            echo "Response: $CREATE_RESPONSE"
            exit 1
          fi
          
          echo "✅ Order created successfully with ID: $ORDER_ID and Number: $ORDER_NUMBER"
          
          # Step 5: Verify order exists
          echo ""
          echo "Step 5: Verifying order exists..."
          GET_ORDER_RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3003/orders/$ORDER_ID)
          GET_STATUS=$(echo "$GET_ORDER_RESPONSE" | tail -n1)
          GET_BODY=$(echo "$GET_ORDER_RESPONSE" | head -n-1)
          
          if [ "$GET_STATUS" != "200" ]; then
            echo "❌: Failed to retrieve order. HTTP Status: $GET_STATUS"
            echo "Response: $GET_BODY"
            exit 1
          fi
          
          echo "Order details: $GET_BODY"
          echo "✅ Order retrieved successfully"
          
          # Step 6: Delete the order (HU-104)
          echo ""
          echo "Step 6: Deleting the order (Testing HU-104)..."
          DELETE_RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE http://localhost:3003/orders/$ORDER_ID)
          DELETE_STATUS=$(echo "$DELETE_RESPONSE" | tail -n1)
          DELETE_BODY=$(echo "$DELETE_RESPONSE" | head -n-1)
          
          if [ "$DELETE_STATUS" != "200" ]; then
            echo "❌: Failed to delete order. HTTP Status: $DELETE_STATUS"
            echo "Response: $DELETE_BODY"
            exit 1
          fi
          
          echo "Delete response: $DELETE_BODY"
          
          # Verify response contains expected fields
          if ! echo "$DELETE_BODY" | grep -q "message"; then
            echo "❌: Delete response missing 'message' field"
            exit 1
          fi
          
          if ! echo "$DELETE_BODY" | grep -q "deleted_order"; then
            echo "❌: Delete response missing 'deleted_order' field"
            exit 1
          fi
          
          echo "✅ Order deleted successfully"
          
          # Step 7: Verify order is really deleted
          echo ""
          echo "Step 7: Verifying order no longer exists..."
          VERIFY_RESPONSE=$(curl -s -w "\n%{http_code}" http://localhost:3003/orders/$ORDER_ID)
          VERIFY_STATUS=$(echo "$VERIFY_RESPONSE" | tail -n1)
          VERIFY_BODY=$(echo "$VERIFY_RESPONSE" | head -n-1)
          
          if [ "$VERIFY_STATUS" != "404" ]; then
            echo "❌: Order still exists after deletion. HTTP Status: $VERIFY_STATUS"
            echo "Response: $VERIFY_BODY"
            exit 1
          fi
          
          echo "Verification response: $VERIFY_BODY"
          echo "✅ Confirmed: Order is deleted (404 Not Found)"
          
          echo ""
          echo "=========================================="
          echo "✅ E2E Test Passed: Complete order lifecycle"
          echo "   - Order creation: ✅"
          echo "   - Order retrieval: ✅"
          echo "   - Order deletion (HU-104): ✅"
          echo "   - Deletion verification: ✅"
          echo "=========================================="

      - name: E2E Test - Delete Non-existent Order
        run: |
          echo ""
          echo "=========================================="
          echo "E2E Test: Delete Non-existent Order"
          echo "=========================================="
          
          NON_EXISTENT_ID=999999
          
          echo "Attempting to delete non-existent order ID: $NON_EXISTENT_ID"
          DELETE_RESPONSE=$(curl -s -w "\n%{http_code}" -X DELETE http://localhost:3003/orders/$NON_EXISTENT_ID)
          DELETE_STATUS=$(echo "$DELETE_RESPONSE" | tail -n1)
          DELETE_BODY=$(echo "$DELETE_RESPONSE" | head -n-1)
          
          echo "Response status: $DELETE_STATUS"
          echo "Response body: $DELETE_BODY"
          
          if [ "$DELETE_STATUS" != "404" ]; then
            echo "❌: Expected 404 for non-existent order, got $DELETE_STATUS"
            exit 1
          fi
          
          if ! echo "$DELETE_BODY" | grep -q "error"; then
            echo "❌: Response should contain 'error' field"
            exit 1
          fi
          
          echo "✅ Correctly returned 404 for non-existent order"
          echo "=========================================="

      - name: E2E Test - Order List After Deletion
        run: |
          echo ""
          echo "=========================================="
          echo "E2E Test: Verify Order Not in List"
          echo "=========================================="
          
          # Create an order
          CUSTOMERS_RESPONSE=$(curl -s http://localhost:3003/customers)
          CUSTOMER_ID=$(echo $CUSTOMERS_RESPONSE | grep -o '"id":[0-9]*' | head -1 | grep -o '[0-9]*')
          
          PRODUCTS_RESPONSE=$(curl -s http://localhost:3001/products)
          PRODUCT_SKU=$(echo $PRODUCTS_RESPONSE | grep -o '"sku":"[^"]*"' | head -1 | sed 's/"sku":"\([^"]*\)"/\1/')
          
          CREATE_PAYLOAD=$(cat <<EOF
          {
            "customer_id": $CUSTOMER_ID,
            "seller_id": "E2E-SELLER-002",
            "seller_name": "E2E Test Seller 2",
            "items": [{"product_sku": "$PRODUCT_SKU", "quantity": 2}],
            "payment_terms": "contado"
          }
          EOF
          )
          
          CREATE_RESPONSE=$(curl -s -X POST http://localhost:3003/orders \
            -H "Content-Type: application/json" \
            -d "$CREATE_PAYLOAD")
          
          ORDER_ID=$(echo $CREATE_RESPONSE | grep -o '"id":[0-9]*' | head -1 | grep -o '[0-9]*')
          ORDER_NUMBER=$(echo $CREATE_RESPONSE | grep -o '"order_number":"[^"]*"' | sed 's/"order_number":"\([^"]*\)"/\1/')
          
          echo "Created order: ID=$ORDER_ID, Number=$ORDER_NUMBER"
          
          # Get all orders before deletion
          ORDERS_BEFORE=$(curl -s http://localhost:3003/orders)
          TOTAL_BEFORE=$(echo $ORDERS_BEFORE | grep -o '"total":[0-9]*' | grep -o '[0-9]*')
          echo "Total orders before deletion: $TOTAL_BEFORE"
          
          # Delete the order
          curl -s -X DELETE http://localhost:3003/orders/$ORDER_ID > /dev/null
          echo "Order $ORDER_ID deleted"
          
          # Get all orders after deletion
          ORDERS_AFTER=$(curl -s http://localhost:3003/orders)
          TOTAL_AFTER=$(echo $ORDERS_AFTER | grep -o '"total":[0-9]*' | grep -o '[0-9]*')
          echo "Total orders after deletion: $TOTAL_AFTER"
          
          # Verify the deleted order is not in the list
          if echo "$ORDERS_AFTER" | grep -q "\"id\":$ORDER_ID"; then
            echo "❌: Deleted order still appears in orders list"
            exit 1
          fi
          
          echo "✅ Deleted order not found in orders list"
          echo "✅ Order count decreased from $TOTAL_BEFORE to $TOTAL_AFTER"
          echo "=========================================="

      - name: Display Docker logs on failure
        if: failure()
        run: |
          echo "Displaying Docker Compose logs due to test failure..."
          docker compose logs --tail=100

      - name: Stop services
        if: always()
        run: |
          echo "Stopping Docker Compose services..."
          docker compose down -v
          echo "✅ Services stopped"

  final-status:
    name: "Final Status & Summary"
    runs-on: ubuntu-latest
    needs:
      - setup-verification
      - unit-test-catalog
      - unit-test-logistics
      - unit-test-sales
      - coverage-report
      - integration-test-docker
      - e2e-test-delete-order
    if: always()

    steps:
      - name: Evaluate results
        run: |
          echo "MediSupply Backend - CI/CD Pipeline Results"
          echo "=============================================="
          echo ""
          
          FAILURES=0
          WARNINGS=0
          
          echo "Setup & Structure:"
          if [[ "${{ needs.setup-verification.result }}" == "success" ]]; then
            echo "   ✅ Project structure verified"
          else
            echo "   ❌: Project structure check failed"
            ((FAILURES++))
          fi
          
          echo ""
          echo "Unit Tests:"
          
          if [[ "${{ needs.unit-test-catalog.result }}" == "success" ]]; then
            echo "   ✅ Catalog Service tests passed"
          else
            echo "   ❌: Catalog Service tests failed"
            ((FAILURES++))
          fi
          
          if [[ "${{ needs.unit-test-logistics.result }}" == "success" ]]; then
            echo "   ✅ Logistics Service tests passed"
          else
            echo "   ERROR: Logistics Service tests failed"
            ((FAILURES++))
          fi
          
          if [[ "${{ needs.unit-test-sales.result }}" == "success" ]]; then
            echo "   ✅ Sales Service tests passed"
          else
            echo "   ❌: Sales Service tests failed"
            ((FAILURES++))
          fi
          
          echo ""
          echo "Coverage Report:"
          if [[ "${{ needs.coverage-report.result }}" == "success" ]]; then
            echo "   ✅ Coverage reports generated"
          else
            echo "   ⚠️: Coverage report had issues"
            ((WARNINGS++))
          fi
          
          echo ""
          echo "Integration Tests:"
          if [[ "${{ needs.integration-test-docker.result }}" == "success" ]]; then
            echo "   ✅ Docker Compose integration tests passed"
          else
            echo "   ❌: Integration tests failed"
            ((FAILURES++))
          fi
          
          echo ""
          echo "E2E Tests:"
          if [[ "${{ needs.e2e-test-delete-order.result }}" == "success" ]]; then
            echo "   ✅ Delete Order E2E tests passed (HU-104)"
          else
            echo "   ❌: Delete Order E2E tests failed"
            ((FAILURES++))
          fi
          
          echo ""
          echo "=============================================="
          echo "Summary: $FAILURES critical failures, $WARNINGS warnings"
          echo ""
          
          if [ $FAILURES -eq 0 ]; then
            echo "✅ Pipeline completed successfully!"
            echo "MediSupply Backend is ready for deployment"
            exit 0
          else
            echo "Pipeline failed with $FAILURES critical issues"
            echo "Please review the failed jobs above"
            exit 1
          fi
