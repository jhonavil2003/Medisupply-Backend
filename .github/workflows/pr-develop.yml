name: Pull request develop

on:
  pull_request:
    branches: 
      [develop]
      
concurrency:
  group: ci-pipenv-catalog-service-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9.6"]

    # Todas las órdenes `run:` se ejecutarán desde ./catalog-service
    defaults:
      run:
        working-directory: ./catalog-service

    env:
      PIPENV_VENV_IN_PROJECT: "1"
      PIPENV_NOSPIN: "1"
      PIPENV_HIDE_EMOJIS: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Cache de pip (global)
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('catalog-service/Pipfile.lock') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-

      # Cache del .venv dentro de catalog-service
      - name: Cache .venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: catalog-service/.venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('catalog-service/Pipfile.lock') }}

      - name: Upgrade pip & install pipenv
        run: |
          python -m pip install --upgrade pip
          python -m pip install "pipenv>=2023.0.0"

      - name: Install deps with Pipenv
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          if [ ! -f Pipfile.lock ]; then
            echo "::error::No se encontró catalog-service/Pipfile.lock (ruta relativa al repo)."
            echo "::error::Genera el lock file con: (cd catalog-service && pipenv lock) y súbelo."
            exit 1
          fi
          pipenv sync --dev --bare --verbose

      - name: Show environment
        run: |
          pipenv --python
          pipenv graph

      - name: Run tests (pytest + coverage)
        run: |
          pipenv run python -m pytest -q \
            --junitxml=pytest.xml \
            --cov=. --cov-report=xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.python-version }}
          path: catalog-service/pytest.xml

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-${{ matrix.python-version }}
          path: catalog-service/coverage.xml
